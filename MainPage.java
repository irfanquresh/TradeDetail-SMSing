/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package in.trillit;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.sql.ResultSet;
import static java.lang.Thread.sleep;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.ScrollPaneConstants;

/**
 *
 * @author IRFAN
 */
public class MainPage extends javax.swing.JFrame {

    Statement st = null;
    boolean gProcessNSETextFile = false;
    boolean gProcessBSETextFile = false;
    int gSkipNSETraderecords = 0;
    int gSkipBSETraderecords = 0;
    boolean settingExist = false;
    ArrayList<User> gUserLoadtList = new ArrayList<>();
    Setting setting = null;
    Writer bw = null;
    String today = null;

    public MainPage() {
        super("Share market Position Updator System");
        try {
            initComponents();
            initLookAndFeel();
            initWindowClosingEvent();

            MySQLConn mysqlconn = new MySQLConn();
            st = mysqlconn.initConnection();

            setting = loadSettingInfo();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            today = dateFormat.format(new Date());
            String nseSyncDate = setting.getNseSyncDate();
            if (today.equalsIgnoreCase(nseSyncDate)) {
                gSkipNSETraderecords = setting.getNseCursorPosition();
            } else {
                gSkipNSETraderecords = 0;
            }
            String bseSyncDate = setting.getBseSyncDate();
            if (today.equalsIgnoreCase(bseSyncDate)) {
                gSkipBSETraderecords = setting.getBseCursorPosition();
            } else {
                gSkipBSETraderecords = 0;
            }
            System.out.println("gSkipNSETraderecords:" + gSkipNSETraderecords);

            LoadUserList lu = new LoadUserList();
            lu.start();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlHeaderSection = new javax.swing.JPanel();
        pnlSuHeader = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        pnlSettingPage = new javax.swing.JPanel();
        btnSettingPage = new javax.swing.JButton();
        pnlFooterSection = new javax.swing.JPanel();
        lblfooter = new javax.swing.JLabel();
        pnlContentSection = new javax.swing.JPanel();
        pnlFileProcessingPanel = new javax.swing.JPanel();
        pnlActionSection = new javax.swing.JPanel();
        pnlNSETextFileUpdater = new javax.swing.JPanel();
        lblNseTextFilePath = new javax.swing.JLabel();
        btnNSETextFileChooser = new javax.swing.JButton();
        btnNSETextFileProcessor = new javax.swing.JButton();
        pnlBSETextFileUpdater = new javax.swing.JPanel();
        lblBSETextFilePath = new javax.swing.JLabel();
        btnBSETextFileChooser = new javax.swing.JButton();
        btnBseTextFileProcessor = new javax.swing.JButton();
        pnlQuickLink = new javax.swing.JPanel();
        pnlQuickLinkContentSection = new javax.swing.JPanel();
        pnlNSETextFileUpdater1 = new javax.swing.JPanel();
        lblUserTextFilePath = new javax.swing.JLabel();
        btnUserTextFileChooser = new javax.swing.JButton();
        pnlSettingGroup = new javax.swing.JPanel();
        btnUserTextFileProcessor = new javax.swing.JButton();
        btnViewUserList = new javax.swing.JButton();
        pnlQuickLinkHeaderSection = new javax.swing.JPanel();
        lblHeader1 = new javax.swing.JLabel();
        pnlActivities = new javax.swing.JPanel();
        spActivities = new javax.swing.JScrollPane();
        taActivities = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        lblActivities = new javax.swing.JLabel();
        btnCopyActivities = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(800, 490));

        pnlHeaderSection.setBackground(new java.awt.Color(255, 255, 255));
        pnlHeaderSection.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        pnlSuHeader.setBackground(new java.awt.Color(255, 255, 255));
        pnlSuHeader.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));
        pnlHeaderSection.add(pnlSuHeader);

        lblHeader.setBackground(new java.awt.Color(255, 255, 255));
        lblHeader.setFont(new java.awt.Font("Agency FB", 0, 24)); // NOI18N
        lblHeader.setText("Share Market");
        lblHeader.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        lblHeader.setMinimumSize(new java.awt.Dimension(150, 31));
        lblHeader.setPreferredSize(new java.awt.Dimension(565, 100));
        pnlHeaderSection.add(lblHeader);

        btnSettingPage.setFocusPainted(false);
        btnSettingPage.setLabel("Setting");
        btnSettingPage.setPreferredSize(new java.awt.Dimension(120, 22));
        btnSettingPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSettingPageActionPerformed(evt);
            }
        });
        pnlSettingPage.add(btnSettingPage);

        pnlHeaderSection.add(pnlSettingPage);

        getContentPane().add(pnlHeaderSection, java.awt.BorderLayout.PAGE_START);

        pnlFooterSection.setBackground(new java.awt.Color(204, 204, 204));
        pnlFooterSection.setLayout(new java.awt.BorderLayout());

        lblfooter.setBackground(new java.awt.Color(204, 204, 204));
        lblfooter.setText("Powered By Trillit");
        lblfooter.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        pnlFooterSection.add(lblfooter, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlFooterSection, java.awt.BorderLayout.PAGE_END);

        pnlContentSection.setBackground(new java.awt.Color(255, 255, 255));
        pnlContentSection.setLayout(new java.awt.BorderLayout());

        pnlFileProcessingPanel.setMinimumSize(new java.awt.Dimension(389, 150));
        pnlFileProcessingPanel.setPreferredSize(new java.awt.Dimension(603, 200));
        pnlFileProcessingPanel.setLayout(new java.awt.BorderLayout());

        pnlActionSection.setLayout(new java.awt.GridLayout(2, 1, 5, 0));

        pnlNSETextFileUpdater.setBackground(new java.awt.Color(226, 226, 226));
        pnlNSETextFileUpdater.setForeground(new java.awt.Color(255, 255, 255));
        pnlNSETextFileUpdater.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlNSETextFileUpdater.setMinimumSize(new java.awt.Dimension(389, 35));
        pnlNSETextFileUpdater.setPreferredSize(new java.awt.Dimension(603, 50));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 50, 20);
        flowLayout1.setAlignOnBaseline(true);
        pnlNSETextFileUpdater.setLayout(flowLayout1);

        lblNseTextFilePath.setText("Nse Test File Path");
        lblNseTextFilePath.setPreferredSize(new java.awt.Dimension(300, 14));
        pnlNSETextFileUpdater.add(lblNseTextFilePath);

        btnNSETextFileChooser.setText("NSE File Chooser");
        btnNSETextFileChooser.setFocusPainted(false);
        btnNSETextFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNSETextFileChooserActionPerformed(evt);
            }
        });
        pnlNSETextFileUpdater.add(btnNSETextFileChooser);

        btnNSETextFileProcessor.setBackground(new java.awt.Color(0, 0, 0));
        btnNSETextFileProcessor.setForeground(new java.awt.Color(255, 255, 255));
        btnNSETextFileProcessor.setText("Start Processing");
        btnNSETextFileProcessor.setFocusPainted(false);
        btnNSETextFileProcessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNSETextFileProcessorActionPerformed(evt);
            }
        });
        pnlNSETextFileUpdater.add(btnNSETextFileProcessor);

        pnlActionSection.add(pnlNSETextFileUpdater);

        pnlBSETextFileUpdater.setBackground(new java.awt.Color(226, 226, 226));
        pnlBSETextFileUpdater.setForeground(new java.awt.Color(255, 255, 255));
        pnlBSETextFileUpdater.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlBSETextFileUpdater.setMinimumSize(new java.awt.Dimension(389, 35));
        pnlBSETextFileUpdater.setPreferredSize(new java.awt.Dimension(603, 50));
        pnlBSETextFileUpdater.setRequestFocusEnabled(false);
        java.awt.FlowLayout flowLayout3 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 50, 20);
        flowLayout3.setAlignOnBaseline(true);
        pnlBSETextFileUpdater.setLayout(flowLayout3);

        lblBSETextFilePath.setText("Bse Test File Path");
        lblBSETextFilePath.setPreferredSize(new java.awt.Dimension(300, 14));
        pnlBSETextFileUpdater.add(lblBSETextFilePath);

        btnBSETextFileChooser.setText("BSE File Chooser");
        btnBSETextFileChooser.setFocusPainted(false);
        btnBSETextFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBSETextFileChooserActionPerformed(evt);
            }
        });
        pnlBSETextFileUpdater.add(btnBSETextFileChooser);

        btnBseTextFileProcessor.setBackground(new java.awt.Color(0, 0, 0));
        btnBseTextFileProcessor.setForeground(new java.awt.Color(255, 255, 255));
        btnBseTextFileProcessor.setText("Start Processing");
        btnBseTextFileProcessor.setFocusPainted(false);
        btnBseTextFileProcessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBseTextFileProcessorActionPerformed(evt);
            }
        });
        pnlBSETextFileUpdater.add(btnBseTextFileProcessor);

        pnlActionSection.add(pnlBSETextFileUpdater);

        pnlFileProcessingPanel.add(pnlActionSection, java.awt.BorderLayout.NORTH);

        pnlQuickLink.setLayout(new java.awt.BorderLayout());

        pnlQuickLinkContentSection.setLayout(new java.awt.GridLayout(1, 0));

        pnlNSETextFileUpdater1.setBackground(new java.awt.Color(226, 226, 226));
        pnlNSETextFileUpdater1.setForeground(new java.awt.Color(255, 255, 255));
        pnlNSETextFileUpdater1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlNSETextFileUpdater1.setMinimumSize(new java.awt.Dimension(389, 35));
        pnlNSETextFileUpdater1.setPreferredSize(new java.awt.Dimension(603, 50));
        java.awt.FlowLayout flowLayout2 = new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 50, 20);
        flowLayout2.setAlignOnBaseline(true);
        pnlNSETextFileUpdater1.setLayout(flowLayout2);

        lblUserTextFilePath.setText("Choose User File");
        lblUserTextFilePath.setPreferredSize(new java.awt.Dimension(300, 14));
        pnlNSETextFileUpdater1.add(lblUserTextFilePath);

        btnUserTextFileChooser.setText("Choose User File");
        btnUserTextFileChooser.setFocusPainted(false);
        btnUserTextFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserTextFileChooserActionPerformed(evt);
            }
        });
        pnlNSETextFileUpdater1.add(btnUserTextFileChooser);

        btnUserTextFileProcessor.setBackground(new java.awt.Color(0, 0, 0));
        btnUserTextFileProcessor.setForeground(new java.awt.Color(255, 255, 255));
        btnUserTextFileProcessor.setText("Import");
        btnUserTextFileProcessor.setFocusPainted(false);
        btnUserTextFileProcessor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUserTextFileProcessorActionPerformed(evt);
            }
        });
        pnlSettingGroup.add(btnUserTextFileProcessor);

        btnViewUserList.setText("View");
        btnViewUserList.setFocusPainted(false);
        btnViewUserList.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btnViewUserList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewUserListActionPerformed(evt);
            }
        });
        pnlSettingGroup.add(btnViewUserList);

        pnlNSETextFileUpdater1.add(pnlSettingGroup);

        pnlQuickLinkContentSection.add(pnlNSETextFileUpdater1);

        pnlQuickLink.add(pnlQuickLinkContentSection, java.awt.BorderLayout.CENTER);

        pnlQuickLinkHeaderSection.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 5));

        lblHeader1.setBackground(new java.awt.Color(255, 255, 255));
        lblHeader1.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblHeader1.setText("Setup");
        lblHeader1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        lblHeader1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lblHeader1.setPreferredSize(new java.awt.Dimension(510, 25));
        pnlQuickLinkHeaderSection.add(lblHeader1);

        pnlQuickLink.add(pnlQuickLinkHeaderSection, java.awt.BorderLayout.PAGE_START);

        pnlFileProcessingPanel.add(pnlQuickLink, java.awt.BorderLayout.CENTER);

        pnlContentSection.add(pnlFileProcessingPanel, java.awt.BorderLayout.NORTH);

        pnlActivities.setLayout(new java.awt.BorderLayout());

        taActivities.setColumns(20);
        taActivities.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        taActivities.setRows(5);
        taActivities.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        taActivities.setEnabled(false);
        spActivities.setViewportView(taActivities);

        pnlActivities.add(spActivities, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblActivities.setBackground(new java.awt.Color(255, 255, 255));
        lblActivities.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblActivities.setText("Activities");
        lblActivities.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1));
        lblActivities.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lblActivities.setPreferredSize(new java.awt.Dimension(565, 25));
        jPanel1.add(lblActivities);

        btnCopyActivities.setText("Copy To Clipboard");
        btnCopyActivities.setFocusPainted(false);
        btnCopyActivities.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCopyActivities.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActivitiesActionPerformed(evt);
            }
        });
        jPanel1.add(btnCopyActivities);

        pnlActivities.add(jPanel1, java.awt.BorderLayout.NORTH);

        pnlContentSection.add(pnlActivities, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlContentSection, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNSETextFileProcessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNSETextFileProcessorActionPerformed
        try {
            String filePath = lblNseTextFilePath.getText();
            System.out.println("filePath:" + filePath);
            if (filePath == null || filePath == "Nse Test File Path" || filePath == "File Path" || filePath == "") {
                try {
                    JOptionPane.showMessageDialog(MainPage.this, "Please Choose File", "Error ", JOptionPane.ERROR_MESSAGE);
                    return;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (gProcessNSETextFile == false) {
                gProcessNSETextFile = true;
                ProcessNSETextFile temp = new ProcessNSETextFile();
                temp.start();
                btnNSETextFileProcessor.setText("Processing... Click TO Stop");
            } else {
                gProcessNSETextFile = false;
                btnNSETextFileProcessor.setText("Stoped... Click TO Start");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnNSETextFileProcessorActionPerformed

    private void btnNSETextFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNSETextFileChooserActionPerformed
        try {
            lblNseTextFilePath.setText("");
            FileHelper fh = new FileHelper();
            File sf = fh.initFileChoose();
            if (sf != null) {
                lblNseTextFilePath.setText(sf.getPath());
            } else {
                lblNseTextFilePath.setText("File Path");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnNSETextFileChooserActionPerformed

    private void btnBSETextFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBSETextFileChooserActionPerformed
        try {
            lblBSETextFilePath.setText("");
            FileHelper fh = new FileHelper();
            File sf = fh.initFileChoose();
            if (sf != null) {
                lblBSETextFilePath.setText(sf.getPath());
            } else {
                lblBSETextFilePath.setText("File Path");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnBSETextFileChooserActionPerformed

    private void btnBseTextFileProcessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBseTextFileProcessorActionPerformed
        try {
            String filePath = lblBSETextFilePath.getText();
            System.out.println("filePath:" + filePath);
            if (filePath == null || filePath == "Bse Test File Path" || filePath == "File Path" || filePath == "") {
                try {
                    JOptionPane.showMessageDialog(MainPage.this, "Please Choose File", "Error ", JOptionPane.ERROR_MESSAGE);
                    return;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else if (gProcessBSETextFile == false) {
                gProcessBSETextFile = true;
                ProcessBSETextFile temp = new ProcessBSETextFile();
                temp.start();
                btnBseTextFileProcessor.setText("Processing... Click TO Stop");
            } else {
                gProcessBSETextFile = false;
                btnBseTextFileProcessor.setText("Stoped... Click TO Start");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnBseTextFileProcessorActionPerformed

    private void btnUserTextFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserTextFileChooserActionPerformed
        try {
            lblUserTextFilePath.setText("");
            FileHelper fh = new FileHelper();
            File sf = fh.initFileChoose();
            if (sf != null) {
                lblUserTextFilePath.setText(sf.getPath());
            } else {
                lblUserTextFilePath.setText("File Path");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnUserTextFileChooserActionPerformed

    private void btnUserTextFileProcessorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUserTextFileProcessorActionPerformed
        try {
            String filePath = lblUserTextFilePath.getText();
            System.out.println("filePath:" + filePath);
            if (filePath == null || filePath == "Choose User File" || filePath == "") {
                try {
                    JOptionPane.showMessageDialog(MainPage.this, "Please Choose File", "Error ", JOptionPane.ERROR_MESSAGE);
                    return;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                ImportUserList lul = new ImportUserList();
                lul.start();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnUserTextFileProcessorActionPerformed

    private void btnViewUserListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewUserListActionPerformed
        try {
            ListAllRecord lu = new ListAllRecord("User Phone Directory", "User", st);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnViewUserListActionPerformed

    private void btnSettingPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSettingPageActionPerformed
        try {
            SettingPage sp = new SettingPage(st, this, setting);
            sp.setVisible(true);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnSettingPageActionPerformed

    private void btnCopyActivitiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActivitiesActionPerformed
        try {
            String s = taActivities.getText();
            StringSelection stringSelection = new StringSelection(s);
            Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
            clpbrd.setContents(stringSelection, null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnCopyActivitiesActionPerformed

    private void initLookAndFeel() {
        try {
            this.setSize(1000, 500);
            Toolkit kit = Toolkit.getDefaultToolkit();
            Image image = kit.getImage(ClassLoader.getSystemResource("images/d6_32x32.png"));
            setIconImage(image);
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    System.out.println("" + info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void initWindowClosingEvent() {
        try {
            setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
            this.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    System.exit(0);
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public class ProcessNSETextFile extends Thread {

        String activitiesFile = "bse-activities-" + MainPage.this.today + ".txt";

        @Override
        public void run() {
            try {
                String filePath = lblNseTextFilePath.getText();
                CsvReader csvReader = new CsvReader();
                SmsHelper smsHelper = new SmsHelper(setting);
                int lclSkipRecords = gSkipNSETraderecords;
                while (gProcessNSETextFile == true) {
                    try {
                        ArrayList<Trade> masterTradeList = new ArrayList();
                        List recordLists = csvReader.readRecords(lclSkipRecords, filePath, ",");

                        //process data
                        for (Iterator it = recordLists.iterator(); it.hasNext();) {
                            try {
                                List trade = (List) it.next();

                                String temp = trade.get(14).toString().trim();
                                String tradeUser = temp;

                                if (tradeUser.equalsIgnoreCase("08082")) {
                                    lclSkipRecords++;
                                    continue;
                                }

                                String tradePhone = "";
                                for (User u : gUserLoadtList) {
                                    if (u.getUserId().equalsIgnoreCase(tradeUser)) {
                                        tradePhone = u.getPhoneNumber();
                                        break;
                                    }
                                }

                                System.out.println("tradePhone:" + tradePhone);
                                if (tradePhone.equalsIgnoreCase("") || tradePhone.length() <= 9) {
                                    lclSkipRecords++;
                                    continue;
                                }

                                temp = trade.get(0).toString().trim();
                                int tradeSymbolNumber = new Integer(temp);

                                temp = trade.get(2).toString().trim();
                                String tradeSymbolText = temp;

                                temp = trade.get(10).toString().trim();
                                int tradeMode = new Integer(temp);

                                temp = trade.get(11).toString().trim();
                                int tradeQuantity = new Integer(temp);

                                temp = trade.get(12).toString().trim();
                                Double tradePrice = new Double(temp);
                                tradePrice = (double) (Math.round(tradePrice * 100.0) / 100.0);

                                temp = trade.get(20).toString().trim();
                                String tradeDate = temp;

                                double newTradePrice = 0;
                                int newTradeQuantity = 0;
                                int tradeListIndex = 0;
                                boolean metFlag = false;
                                for (Trade testTrade : masterTradeList) {
                                    if (testTrade.getTradeSymboltext().equalsIgnoreCase(tradeSymbolText)
                                            && testTrade.getTradeMode() == tradeMode
                                            && testTrade.getTradeUser().equalsIgnoreCase(tradeUser)) {
                                        newTradePrice = (double) (tradePrice + testTrade.getTradePrice()) / 2;
                                        newTradePrice = (double) (Math.round(newTradePrice * 100.0) / 100.0);
                                        newTradeQuantity = tradeQuantity + testTrade.getTradeQuantity();
                                        metFlag = true;
                                        break;
                                    }
                                    tradeListIndex++;
                                }

                                if (metFlag == true) {
                                    Trade newTrade = new Trade();
                                    newTrade.setTradeMode(tradeMode);
                                    newTrade.setTradePrice(newTradePrice);
                                    newTrade.setTradeQuantity(newTradeQuantity);
                                    newTrade.setTradeSymbolNumber(tradeSymbolNumber);
                                    newTrade.setTradeSymboltext(tradeSymbolText);
                                    newTrade.setTradeTotal(newTradePrice * newTradeQuantity);
                                    newTrade.setTradeUser(tradeUser);
                                    newTrade.setTradePhone(tradePhone);
                                    newTrade.setTradeDate(tradeDate);
                                    masterTradeList.set(tradeListIndex, newTrade);

                                } else {
                                    Trade newTrade = new Trade();
                                    newTrade.setTradeMode(tradeMode);
                                    newTrade.setTradePrice(tradePrice);
                                    newTrade.setTradeQuantity(tradeQuantity);
                                    newTrade.setTradeSymbolNumber(tradeSymbolNumber);
                                    newTrade.setTradeSymboltext(tradeSymbolText);
                                    newTrade.setTradeTotal(tradePrice * tradeQuantity);
                                    newTrade.setTradeUser(tradeUser);
                                    newTrade.setTradePhone(tradePhone);
                                    newTrade.setTradeDate(tradeDate);
                                    masterTradeList.add(newTrade);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            lclSkipRecords++;
                        }

                        recordLists = null;
                        ArrayList<Message> messageList = new ArrayList<>();
                        for (Trade trade : masterTradeList) {
                            boolean messageFound = false;
                            String prevMessage = null;
                            String messageText = "";
                            String phoneNumber = trade.getTradePhone();
                            String userNumber = trade.getTradeUser();

                            if (!phoneNumber.equalsIgnoreCase("") && phoneNumber.length() >= 10) {
                                int messageIndex = 0;
                                for (Message message : messageList) {
                                    if (message.getUserNumber().equalsIgnoreCase(userNumber)) {
                                        prevMessage = message.getMessage();
                                        messageFound = true;
                                        break;
                                    }
                                    messageIndex++;
                                }
                                if (messageFound == true) {
                                    if (trade.getTradeMode() == 1) {
                                        messageText = prevMessage
                                                + ", BUY " + trade.getTradeQuantity() + " " + trade.getTradeSymboltext()
                                                + " at " + trade.getTradePrice() + " ";
                                    } else {
                                        messageText = prevMessage
                                                + ", SELL " + trade.getTradeQuantity() + " " + trade.getTradeSymboltext()
                                                + " at " + trade.getTradePrice() + " ";
                                    }
                                } else if (trade.getTradeMode() == 1) {
                                    messageText = "NSECM Trade (" + trade.getTradeDate()
                                            + ")  : Client (" + trade.getTradeUser()
                                            + "), BUY " + trade.getTradeQuantity() + " " + trade.getTradeSymboltext()
                                            + " at " + trade.getTradePrice() + " ";
                                } else {
                                    messageText = "NSECM Trade (" + trade.getTradeDate()
                                            + ")  : Client (" + trade.getTradeUser()
                                            + "), SELL " + trade.getTradeQuantity() + " " + trade.getTradeSymboltext()
                                            + " at " + trade.getTradePrice() + " ";
                                }

                                Message newMessage = new Message();
                                newMessage.setMessage(messageText);
                                newMessage.setPhoneNumber(phoneNumber);
                                newMessage.setUserNumber(userNumber);

                                if (messageFound == true) {
                                    messageList.set(messageIndex, newMessage);
                                } else {
                                    messageList.add(newMessage);
                                }
                            }
                        }

                        for (Message message : messageList) {
                            try {
                                smsHelper.sendSMS(message.getPhoneNumber(), message.getMessage() + " SNAMAN");
                                String t = "Phone:" + message.getPhoneNumber() + " Message:" + message.getMessage() + " SNAMAN" + "\n";
                                taActivities.setText(taActivities.getText() + t);
                                writeToFile(t);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }

                        if (lclSkipRecords == gSkipNSETraderecords) {
                            Date d = new Date();
                            String msg = "============================================ \n"
                                    + "NSE : No record found! \n"
                                    + "at " + d + "\n"
                                    + "============================================ \n";
                            taActivities.setText(taActivities.getText() + msg);
                            sleep(1500000);
                        } else {
                            gSkipNSETraderecords = lclSkipRecords;
                            updateNseCursorPosition(gSkipNSETraderecords);
                            Date d = new Date();
                            String msg = "============================================ \n"
                                    + "NSE : record processed successfully! \n"
                                    + "at " + d + "\n"
                                    + "============================================ \n";
                            taActivities.setText(taActivities.getText() + msg);
                            sleep(1500000);
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        private void updateNseCursorPosition(int gSkipNSETraderecords) {
            try {
                Date date = new Date();
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                String today = dateFormat.format(date);
                String sql = "UPDATE Setting SET nseCursorPosition='" + gSkipNSETraderecords + "',nseSyncDate='" + today + "' WHERE id=1;";
                System.out.println("sql:" + sql);
                st.executeUpdate(sql);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        private void writeToFile(String t) {
            try (Writer writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(activitiesFile, true), "utf-8"))) {
                writer.write(t);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    public class ImportUserList extends Thread {

        @Override
        public void run() {
            try {
                String filePath = lblUserTextFilePath.getText();
                System.out.println("filePath:" + filePath);
                if (filePath == null || filePath == "Choose User File" || filePath == "") {
                    try {
                        JOptionPane.showMessageDialog(MainPage.this, "Please Choose File", "Error ", JOptionPane.ERROR_MESSAGE);
                        return;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                CsvReader csvReader = new CsvReader();
                ArrayList<User> lclUserImportList = new ArrayList<>();
                try {
                    ArrayList recordLists = csvReader.readFile(filePath, "\\|");

                    recordLists.forEach(System.out::println);
                    //process data
                    for (Iterator it = recordLists.iterator(); it.hasNext();) {
                        try {
                            List userList = (List) it.next();
                            if (userList != null && userList.size() > 1) {
                                String temp = userList.get(0).toString().trim();
                                String userId = temp;
                                temp = userList.get(1).toString().trim();
                                String phonetext = temp;
                                if (phonetext.length() >= 10) {
                                    User u = new User();
                                    u.setUserId(userId);
                                    u.setPhoneNumber(phonetext);
                                    lclUserImportList.add(u);
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    try {
                        String query = createUsertable();
                        st.executeUpdate(query);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        for (User user : lclUserImportList) {
                            try {
                                String query = createUserInsertQuery(user.getUserId(), user.getPhoneNumber());
                                st.executeUpdate(query);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        JOptionPane.showMessageDialog(MainPage.this, "Success", "Success ", JOptionPane.INFORMATION_MESSAGE);
                        lblUserTextFilePath.setText("Choose User File");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    try {
                        LoadUserList userList = new LoadUserList();
                        userList.start();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        private String createUsertable() {
            try {
                String sql = "CREATE TABLE IF NOT EXISTS  User "
                        + "(userId TEXT PRIMARY KEY     NOT NULL,"
                        + " phoneNumber           TEXT    NOT NULL)";
                return sql;
            } catch (Exception e) {
                throw new UnsupportedOperationException("Not supported yet.");
            }
        }

        private String createUserInsertQuery(String userId, String phoneNumber) {
            try {
                String sql = "INSERT INTO User (userId,phoneNumber) "
                        + "VALUES ('" + userId + "', '" + phoneNumber + "' );";
                return sql;
            } catch (Exception e) {
                throw new UnsupportedOperationException("Not supported yet.");
            }
        }
    }

    public class LoadUserList extends Thread {

        @Override
        public void run() {
            try {
                String query = createUsertable();
                st.executeUpdate(query);
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                gUserLoadtList.clear();
                ResultSet rs = st.executeQuery("select * from User;");
                while (rs.next()) {
                    String userId = rs.getString("userId");
                    String phoneNumber = rs.getString("phoneNumber");
                    User u = new User();
                    u.setUserId(userId);
                    u.setPhoneNumber(phoneNumber);
                    gUserLoadtList.add(u);
                }
                gUserLoadtList.forEach(System.out::println);
                System.out.println("UserList Loaded Successfully");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        private String createUsertable() {
            try {
                String sql = "CREATE TABLE IF NOT EXISTS  User "
                        + "(userId TEXT PRIMARY KEY     NOT NULL,"
                        + " phoneNumber           TEXT    NOT NULL)";
                return sql;
            } catch (Exception e) {
                throw new UnsupportedOperationException("Not supported yet.");
            }
        }
    }

    public void setSetting(Setting setting) {
        this.setting = setting;
    }

    private Setting loadSettingInfo() {
        Setting s = null;
        try {
            createSettingtable();
            s = readSetting();
            if (s == null) {
                insertSetting();
                s = readSetting();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }

    private void createSettingtable() {
        System.out.println("============createSettingtable===========");
        try {
            String sql = "CREATE TABLE IF NOT EXISTS  Setting "
                    + "( id INT PRIMARY KEY NOT NULL,"
                    + " senderId TEXT  NOT NULL,"
                    + " senderName TEXT NOT NULL, "
                    + " senderPassword TEXT NOT NULL, "
                    + " nseCursorPosition INT NOT NULL, "
                    + " bseCursorPosition INT NOT NULL,"
                    + " nseSyncDate TEXT NOT NULL,"
                    + " bseSyncDate TEXT NOT NULL"
                    + ")";
            st.executeUpdate(sql);
        } catch (Exception e) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
    }

    private Setting readSetting() {
        System.out.println("============readSetting===========");
        Setting s = null;
        try {
            ResultSet rs = st.executeQuery("select * from Setting where id=1;");
            while (rs.next()) {
                System.out.println("==" + rs.getString("nseSyncDate"));
                settingExist = true;
                s = new Setting();
                s.setId(rs.getInt("id"));
                s.setSenderId(rs.getString("senderId"));
                s.setUserName(rs.getString("senderName"));
                s.setPassword(rs.getString("senderPassword"));
                s.setNseCursorPosition(rs.getInt("nseCursorPosition"));
                s.setBseCursorPosition(rs.getInt("bseCursorPosition"));
                s.setNseSyncDate(rs.getString("nseSyncDate"));
                s.setBseSyncDate(rs.getString("bseSyncDate"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return s;
    }

    private void insertSetting() {
        System.out.println("============insertSetting===========");
        try {
            Date date = new Date();
            DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            String today = dateFormat.format(date);

            String sql = "INSERT INTO Setting (id,senderId,senderName,senderPassword,nseCursorPosition,bseCursorPosition,nseSyncDate,bseSyncDate) "
                    + "VALUES (1,'', '' ,'','0','0','" + today + "','" + today + "');";

            System.out.println("sql:" + sql);
            st.executeUpdate(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBSETextFileChooser;
    private javax.swing.JButton btnBseTextFileProcessor;
    private javax.swing.JButton btnCopyActivities;
    private javax.swing.JButton btnNSETextFileChooser;
    private javax.swing.JButton btnNSETextFileProcessor;
    private javax.swing.JButton btnSettingPage;
    private javax.swing.JButton btnUserTextFileChooser;
    private javax.swing.JButton btnUserTextFileProcessor;
    private javax.swing.JButton btnViewUserList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblActivities;
    private javax.swing.JLabel lblBSETextFilePath;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblHeader1;
    private javax.swing.JLabel lblNseTextFilePath;
    private javax.swing.JLabel lblUserTextFilePath;
    private javax.swing.JLabel lblfooter;
    private javax.swing.JPanel pnlActionSection;
    private javax.swing.JPanel pnlActivities;
    private javax.swing.JPanel pnlBSETextFileUpdater;
    private javax.swing.JPanel pnlContentSection;
    private javax.swing.JPanel pnlFileProcessingPanel;
    private javax.swing.JPanel pnlFooterSection;
    private javax.swing.JPanel pnlHeaderSection;
    private javax.swing.JPanel pnlNSETextFileUpdater;
    private javax.swing.JPanel pnlNSETextFileUpdater1;
    private javax.swing.JPanel pnlQuickLink;
    private javax.swing.JPanel pnlQuickLinkContentSection;
    private javax.swing.JPanel pnlQuickLinkHeaderSection;
    private javax.swing.JPanel pnlSettingGroup;
    private javax.swing.JPanel pnlSettingPage;
    private javax.swing.JPanel pnlSuHeader;
    private javax.swing.JScrollPane spActivities;
    private javax.swing.JTextArea taActivities;
    // End of variables declaration//GEN-END:variables
}
